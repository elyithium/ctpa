import requests
from urllib.parse import urljoin
from scanner.sql_injection_scanner import scan_sql_injection
from scanner.xss_scanner import scan_xss
from scanner.broken_authentication_scanner import scan_broken_authentication
from scanner.broken_access_control_scanner import scan_broken_access_control
from scanner.security_misconfiguration_scanner import scan_security_misconfigurations
from scanner.open_ports_scanner import scan_open_ports, common_tcp_ports
from scanner.web_host_scanner import scan_web_host_info
from scanner.cryptographic_scanner import scan_cryptographic_failures_domain, scan_cryptographic_failures_endpoint
from colorama import init, Fore, Style  # Import colorama

# Initialize colorama
init(autoreset=True)
from scanner.csrf_scanner import scan_csrf  # Import the CSRF scanner

class VulnerabilityScanner:
    def __init__(self, base_url, endpoints, target_ip, host_info_url=None):
        self.base_url = base_url
        self.endpoints = endpoints
        self.target_ip = target_ip
        self.host_info_url = host_info_url if host_info_url else base_url
        self.results = []

    def run_scans(self):
        # Scan for web host information
        print(f"{Fore.CYAN}Scanning for web host information starting from {self.host_info_url}...{Style.RESET_ALL}")
        host_info = scan_web_host_info(self.host_info_url)
        if host_info:
            self.results.append({
                "type": "Host Information",
                "details": host_info
            })

        # Now, scan web application vulnerabilities
        for endpoint, params in self.endpoints.items():
            url = urljoin(self.base_url, endpoint)
            print(f"{Fore.CYAN}Scanning {url}...{Style.RESET_ALL}")

            # Run the relevant scanner based on the endpoint
            if "SqlInjection" in endpoint:
                sql_vulns = scan_sql_injection(url, params)
                if sql_vulns:
                    self.results.append({
                        "type": "SQL Injection",
                        "endpoint": url,
                        "vulnerabilities": sql_vulns,
                    })

            if "XSS" in endpoint:
                xss_vulns = scan_xss(url, params)
                if xss_vulns:
                    self.results.append({
                        "type": "XSS",
                        "endpoint": url,
                        "vulnerabilities": xss_vulns,
                    })

            if "Auth" in endpoint:
                auth_vulns = scan_broken_authentication(url, params)
                if auth_vulns:
                    self.results.append({
                        "type": "Broken Authentication",
                        "endpoint": url,
                        "vulnerabilities": auth_vulns,
                    })

            if "AccessControl" in endpoint:
                access_vulns = scan_broken_access_control(url, params)
                if access_vulns:
                    self.results.append({
                        "type": "Broken Access Control",
                        "endpoint": url,
                        "vulnerabilities": access_vulns,
                    })

            if "login" in endpoint:
                config_vulns = scan_security_misconfigurations(url)
                if config_vulns:
                    self.results.append({
                        "type": "Security Misconfiguration",
                        "endpoint": url,
                        "vulnerabilities": config_vulns,
                    })

        # Run domain check for cryptographic failures
        cryptographic_failures_domain = scan_cryptographic_failures_domain(self.base_url)
        if cryptographic_failures_domain:
            self.results.append({
                "type" : "Cryptographic Failures Domain-wide",
                "target_ip": self.target_ip,
                "vulnerabilities": cryptographic_failures_domain,
            })

        # Run the open port scanner on the target IP
        open_ports = scan_open_ports(self.target_ip, common_tcp_ports)
        if open_ports:
            self.results.append({
                "type": "Open Ports",
                "target_ip": self.target_ip,
                "vulnerabilities": open_ports,
            })


    def generate_report(self):
        print(f"{Fore.BLUE}________                        _________                      {Style.RESET_ALL}")
        print(f"{Fore.BLUE}\______ \ ___.__. ____ _____   /   _____/ ____ _____    ____   {Style.RESET_ALL}")
        print(f"{Fore.BLUE} |    |  <   |  |/    \ \__ \   \_____  \/  ___\\__  \  /    \  {Style.RESET_ALL}")
        print(f"{Fore.BLUE} |    `   \___  |   |  \/ __ \_/        \  \___ / __ \|   |  \ {Style.RESET_ALL}")
        print(f"{Fore.BLUE}/_______  / ____|___|  (____  /_______  /\___  >____  /___|  / {Style.RESET_ALL}")
        print(f"{Fore.BLUE}        \/\/         \/     \/        \/     \/     \/     \/  {Style.RESET_ALL}")

        print(f"{Fore.GREEN}Scan Results:{Style.RESET_ALL}")
        for result in self.results:
            # Handle Open Ports separately
            if result["type"] == "Open Ports":
                print(f"{Fore.YELLOW}Vulnerability: {result['type']} detected on {result['target_ip']}{Style.RESET_ALL}")
                for port, vulnerabilities in result["vulnerabilities"].items():
                    print(f"  - Port: {Fore.YELLOW}{port}{Style.RESET_ALL}")
                    print(f"    Potential Vulnerabilities for port {port}:")
                    for vuln in vulnerabilities:
                        print(f"      - {Fore.RED}{vuln}{Style.RESET_ALL}")
            elif result["type"] == "Cryptographic Failures Domain-wide":
                print(f"{Fore.YELLOW}Vulnerability: {result['type']} detected on {result['target_ip']}{Style.RESET_ALL}")
                for vuln in result["vulnerabilities"]:
                    print(f"  - Issue: {Fore.RED}{vuln['issue']}{Style.RESET_ALL}")
                    print(f"    Description: {Fore.YELLOW}{vuln['description']}{Style.RESET_ALL}")
                    print(f"    Severity: {Fore.YELLOW}{vuln['severity']}{Style.RESET_ALL}")
            elif result["type"] == "Host Information":
                print(f"{Fore.GREEN}Vulnerability: {result['type']} detected at {result['details']['URL']}{Style.RESET_ALL}")
                print(f"\n{Fore.CYAN}All Response Headers:{Style.RESET_ALL}")
                for header, value in result["details"]["all_headers"].items():
                    print(f"  - {Fore.CYAN}{header}{Style.RESET_ALL}: {value}")

                print(f"\n{Fore.YELLOW}Security Headers:{Style.RESET_ALL}")
                for header, details in result["details"]["security_headers"].items():
                    if details["status"] == "Missing":
                        print(f"  - {Fore.RED}{header}: Missing ({details['severity']} severity){Style.RESET_ALL}")
                        print(f"    {Fore.RED}Description: {details['description']}{Style.RESET_ALL}")
                    elif details["status"] == "Present":
                        print(f"  - {Fore.GREEN}{header}: Present - {details['value']}{Style.RESET_ALL}")
                print()
            else:
                # Handle SQL Injection separately with more clarity on the types of SQLi
                if result["type"] == "SQL Injection":
                    print(f"{Fore.RED}Vulnerability: {result['type']} detected at {result.get('endpoint', 'Unknown endpoint')}{Style.RESET_ALL}")
                    for vuln in result["vulnerabilities"]:
                        if isinstance(vuln, tuple):
                            print(f"  - {Fore.YELLOW}Parameter: {vuln[0]} | Payload: {vuln[1]} | Type: {vuln[2]}{Style.RESET_ALL}")
                        else:
                            print(f"  - Issue: {Fore.RED}{vuln}{Style.RESET_ALL}")
                else:
                    # Default handling for other vulnerabilities
                    severity_color = Fore.GREEN if 'low' in result["type"].lower() else Fore.RED if 'high' in result["type"].lower() else Fore.YELLOW
                    print(f"{severity_color}Vulnerability: {result['type']} detected at {result.get('endpoint', 'Unknown endpoint')}{Style.RESET_ALL}")
                    for vuln in result["vulnerabilities"]:
                        if isinstance(vuln, tuple):
                            print(f"  - Parameter: {Fore.YELLOW}{vuln[0]}{Style.RESET_ALL} | Payload: {Fore.RED}{vuln[1]}{Style.RESET_ALL}")
                        else:
                            print(f"  - Issue: {Fore.RED}{vuln}{Style.RESET_ALL}")
