import requests
import uuid
import os
from urllib.parse import urljoin
from scanner.sql_injection_scanner import scan_sql_injection
from scanner.xss_scanner import scan_xss
from scanner.broken_authentication_scanner import scan_broken_authentication
from scanner.broken_access_control_scanner import scan_broken_access_control
from scanner.security_misconfiguration_scanner import scan_security_misconfigurations
from scanner.open_ports_scanner import scan_open_ports, common_tcp_ports
from scanner.web_host_scanner import scan_web_host_info
from scanner.cryptographic_scanner import scan_cryptographic_failures_domain, scan_cryptographic_failures_endpoint
from scanner_engine.pdf_report_generator import generate_reportlab_pdf
from colorama import init, Fore, Style  # Import colorama

# Initialize colorama
init(autoreset=True)
from scanner.csrf_scanner import scan_csrf  # Import the CSRF scanner

class VulnerabilityScanner:
    def __init__(self, base_url, endpoints, target_ip, host_info_url=None):
        self.base_url = base_url
        self.endpoints = endpoints
        self.target_ip = target_ip
        self.host_info_url = host_info_url if host_info_url else base_url
        self.results = []

    def run_scans(self, scan_type='Full Scan'):
        # Define scanner functions and associate them with scanner types
        print(f"{Fore.CYAN}Scanning {self.base_url}...{Style.RESET_ALL}")

		# Always gather host information
        self.run_web_host_info_scan()

        scanner_functions = {
            'Full Scan': self.run_full_scan,
            'Broken Access Control': self.run_broken_access_control_scan,
            'Injection': self.run_injection_scan,
            'Cryptographic Failures': self.run_cryptographic_failures_scan,
            'Security Misconfiguration': self.run_security_misconfiguration_scan,
            'Reconnaissance': self.run_reconnaissance_scan,
            'Broken Authentication': self.run_broken_authentication_scan
        }

        # Call the scanner function based on the type
        if scan_type in scanner_functions:
            scanner_functions[scan_type]()
        else:
            print(f"Invalid scan type: {scan_type}")


    def run_full_scan(self):
        # Full scan includes all individual scan types
        self.run_broken_access_control_scan()
        self.run_broken_authentication_scan()
        self.run_injection_scan()
        self.run_cryptographic_failures_scan()
        self.run_security_misconfiguration_scan()
        self.run_reconnaissance_scan()

    def run_web_host_info_scan(self):
        print(f"{Fore.CYAN}Scanning for web host information starting from {self.host_info_url}...{Style.RESET_ALL}")
        host_info = scan_web_host_info(self.host_info_url)
        if host_info:
            self.results.append({
                "type": "Host Information",
                "details": host_info
            })

    def run_broken_access_control_scan(self):
        print(f"{Fore.CYAN}Running Broken Access Control scan from {self.host_info_url}...{Style.RESET_ALL}")
        for endpoint, params in self.endpoints.items():
            if "AccessControl" in endpoint:
                access_vulns = scan_broken_access_control(urljoin(self.base_url, endpoint), params)
                if access_vulns:
                    self.results.append({
                        "type": "Broken Access Control",
                        "endpoint": urljoin(self.base_url, endpoint),
                        "vulnerabilities": access_vulns
                    })

    def run_injection_scan(self):
        print(f"{Fore.CYAN}Running Injection scan (SQLi & XSS) from {self.host_info_url}...{Style.RESET_ALL}")
        for endpoint, params in self.endpoints.items():
            url = urljoin(self.base_url, endpoint)
            if "SqlInjection" in endpoint:
                sql_vulns = scan_sql_injection(url, params)
                if sql_vulns:
                    self.results.append({
                        "type": "SQL Injection",
                        "endpoint": url,
                        "vulnerabilities": sql_vulns
                    })
            if "XSS" in endpoint:
                xss_vulns = scan_xss(url, params)
                if xss_vulns:
                    self.results.append({
                        "type": "XSS",
                        "endpoint": url,
                        "vulnerabilities": xss_vulns
                    })

    def run_cryptographic_failures_scan(self):
        print(f"{Fore.CYAN}Running Cryptographic Failures scan from {self.host_info_url}...{Style.RESET_ALL}")
        for endpoint, params in self.endpoints.items():
            if "login" in endpoint:
                cryptographic_failures_endpoint = scan_cryptographic_failures_endpoint(urljoin(self.base_url, endpoint), params)
                if cryptographic_failures_endpoint:
                    self.results.append({
                        "type": "Cryptographic Failures Within Endpoint",
                        "endpoint": urljoin(self.base_url, endpoint),
                        "vulnerabilities": cryptographic_failures_endpoint
                    })

        cryptographic_failures_domain = scan_cryptographic_failures_domain(self.base_url)
        if cryptographic_failures_domain:
            self.results.append({
                "type": "Cryptographic Failures Domain-wide",
                "target_ip": self.target_ip,
                "vulnerabilities": cryptographic_failures_domain
            })

    def run_security_misconfiguration_scan(self):
        print(f"{Fore.CYAN}Running Security Misconfiguration scan from {self.host_info_url}...{Style.RESET_ALL}")
        for endpoint in self.endpoints.keys():
            if "login" in endpoint:
                config_vulns = scan_security_misconfigurations(urljoin(self.base_url, endpoint))
                if config_vulns:
                    self.results.append({
                        "type": "Security Misconfiguration",
                        "endpoint": urljoin(self.base_url, endpoint),
                        "vulnerabilities": config_vulns
                    })

    def run_broken_authentication_scan(self):
        print(f"{Fore.CYAN}Running Broken Authentication scan from {self.host_info_url}...{Style.RESET_ALL}")
        for endpoint, params in self.endpoints.items():
            if "Auth" in endpoint:
                auth_vulns = scan_broken_authentication(urljoin(self.base_url, endpoint), params)
                if auth_vulns:
                    self.results.append({
                        "type": "Broken Authentication",
                        "endpoint": urljoin(self.base_url, endpoint),
                        "vulnerabilities": auth_vulns,
                    })

    def run_reconnaissance_scan(self):
        print(f"{Fore.CYAN}Running Open Ports scan for {self.target_ip}...{Style.RESET_ALL}")
        open_ports = scan_open_ports(self.target_ip, common_tcp_ports)
        if open_ports:
            self.results.append({
                "type": "Open Ports",
                "target_ip": self.target_ip,
                "vulnerabilities": open_ports
            })

    def summarize_alerts(self):
        summary = {'High': 0, 'Medium': 0, 'Low': 0, 'Informational': 0}
        for result in self.results:
            if 'vulnerabilities' in result:
                for vuln in result['vulnerabilities']:
                    severity = vuln.get('severity', 'Informational')
                    if severity in summary:
                        summary[severity] += 1
        return summary

    def summarize_categories(self):
        category_summary = {}
        for result in self.results:
            category = result.get('type', 'Uncategorized')
            if category not in category_summary:
                category_summary[category] = 0
            if 'vulnerabilities' in result:
                category_summary[category] += len(result['vulnerabilities'])
        return category_summary

    def generate_pdf_report(self, report_id=None):
		# Create unique id
        if not report_id:
            report_id = str(uuid.uuid4())

		# Gather Information
        site = self.base_url
        summary = self.summarize_alerts()
        category_summary = self.summarize_categories()
        file_path = f"./reports/vulnerability_report_{report_id}.pdf"

		# Ensure the file doesn't exist
        while os.path.exists(file_path):
            report_id = str(uuid.uuid4())
            file_path = f"./reports/vulnerability_report_{report_id}.pdf"

        print(site, summary, category_summary, self.results, file_path)
		# Generate PDF
        generate_reportlab_pdf(site, summary, category_summary, self.results, file_path)
        return report_id, file_path

	# Print in Console
    def generate_console_report(self):
        print(self.results)
        print(f"{Fore.BLUE}________                        _________                      {Style.RESET_ALL}")
        print(f"{Fore.BLUE}\______ \ ___.__. ____ _____   /   _____/ ____ _____    ____   {Style.RESET_ALL}")
        print(f"{Fore.BLUE} |    |  <   |  |/    \ \__ \   \_____  \/  ___\\__  \  /    \  {Style.RESET_ALL}")
        print(f"{Fore.BLUE} |    `   \___  |   |  \/ __ \_/        \  \___ / __ \|   |  \ {Style.RESET_ALL}")
        print(f"{Fore.BLUE}/_______  / ____|___|  (____  /_______  /\___  >____  /___|  / {Style.RESET_ALL}")
        print(f"{Fore.BLUE}        \/\/         \/     \/        \/     \/     \/     \/  {Style.RESET_ALL}")

        print(f"{Fore.GREEN}Scan Results:{Style.RESET_ALL}")
        for result in self.results:
            # Handle Open Ports separately
            if result["type"] == "Open Ports":
                print(f"{Fore.YELLOW}Vulnerability: {result['type']} detected on {result['target_ip']}{Style.RESET_ALL}")
                for port_info in result["vulnerabilities"]:
                    port = port_info["port"]
                    vulnerabilities = port_info["vulnerabilities"]
                    print(f"  - Port: {Fore.YELLOW}{port}{Style.RESET_ALL}")
                    print(f"    Potential Vulnerabilities for port {port}:")
                    for vuln in vulnerabilities:
                        print(f"  - Issue: {Fore.RED}{vuln['issue']}{Style.RESET_ALL}")
                        print(f"    Description: {Fore.YELLOW}{vuln['description']}{Style.RESET_ALL}")
                        print(f"    Severity: {Fore.YELLOW}{vuln['severity']}{Style.RESET_ALL}")
            elif result["type"] == "Cryptographic Failures Domain-wide":
                print(f"{Fore.YELLOW}Vulnerability: {result['type']} detected on {result['target_ip']}{Style.RESET_ALL}")
                for vuln in result["vulnerabilities"]:
                    print(f"  - Issue: {Fore.RED}{vuln['issue']}{Style.RESET_ALL}")
                    print(f"    Description: {Fore.YELLOW}{vuln['description']}{Style.RESET_ALL}")
                    print(f"    Severity: {Fore.YELLOW}{vuln['severity']}{Style.RESET_ALL}")
            elif result["type"] == "Host Information":
                print(f"{Fore.GREEN}Vulnerability: {result['type']} detected at {result['details']['URL']}{Style.RESET_ALL}")
                print(f"\n{Fore.CYAN}All Response Headers:{Style.RESET_ALL}")

                for header, value in result["details"]["all_headers"].items():
                    print(f"  - {Fore.CYAN}{header}{Style.RESET_ALL}: {value}")

                print(f"\n{Fore.YELLOW}Security Headers:{Style.RESET_ALL}")
                for header, details in result["details"]["security_headers"].items():
                    if details["status"] == "Missing":
                        print(f"  - {Fore.RED}{header}: Missing ({details['severity']} severity){Style.RESET_ALL}")
                        print(f"    {Fore.RED}Description: {details['description']}{Style.RESET_ALL}")
                    elif details["status"] == "Present":
                        print(f"  - {Fore.GREEN}{header}: Present - {details['value']}{Style.RESET_ALL}")
                print()

            # Handle SQL Injection separately with more clarity on the types of SQLi
            elif result["type"] == "SQL Injection":
                print(f"{Fore.RED}Vulnerability: {result['type']} detected at {result.get('endpoint', 'Unknown endpoint')}{Style.RESET_ALL}")
                for vuln in result["vulnerabilities"]:
                    print(f"  - Issue: {Fore.RED}{vuln['issue']}{Style.RESET_ALL}")
                    print(f"    Description: {Fore.YELLOW}{vuln['description']}{Style.RESET_ALL}")
                    print(f"    Severity: {Fore.RED}{vuln['severity']}{Style.RESET_ALL}")
            else:
                # Default handling for other vulnerabilities
                print(f"{Fore.YELLOW}Vulnerability: {result['type']} detected at {result.get('endpoint', 'Unknown endpoint')}{Style.RESET_ALL}")
                for vuln in result["vulnerabilities"]:
                    print(f"  - Issue: {Fore.RED}{vuln['issue']}{Style.RESET_ALL}")
                    print(f"    Description: {Fore.YELLOW}{vuln['description']}{Style.RESET_ALL}")
                    print(f"    Severity: {Fore.RED}{vuln['severity']}{Style.RESET_ALL}")
