import requests
from urllib.parse import urljoin
from scanner.sql_injection_scanner import scan_sql_injection
from scanner.xss_scanner import scan_xss
from scanner.broken_authentication_scanner import scan_broken_authentication
from scanner.sensitive_data_exposure_scanner import scan_sensitive_data_exposure
from scanner.broken_access_control_scanner import scan_broken_access_control
from scanner.insecure_deserialization_scanner import scan_insecure_deserialization
from scanner.security_misconfiguration_scanner import scan_security_misconfigurations
from scanner.open_ports_scanner import scan_open_ports  

class VulnerabilityScanner:
    def __init__(self, base_url, endpoints, target_ip):
        self.base_url = base_url
        self.endpoints = endpoints
        self.target_ip = target_ip  
        self.results = []

    def run_scans(self):
        for endpoint, params in self.endpoints.items():
            url = urljoin(self.base_url, endpoint)
            print(f"Scanning {url}...")

            # Run each scanner
            sql_vulns = scan_sql_injection(url, params)
            xss_vulns = scan_xss(url, params)
            auth_vulns = scan_broken_authentication(url, params)
            data_vulns = scan_sensitive_data_exposure(url)
            access_vulns = scan_broken_access_control(url)
            deserialization_vulns = scan_insecure_deserialization(url, params)
            config_vulns = scan_security_misconfigurations(url)

            # Collect results
            if sql_vulns:
                self.results.append(
                    {
                        "type": "SQL Injection",
                        "endpoint": url,
                        "vulnerabilities": sql_vulns,
                    }
                )
            if xss_vulns:
                self.results.append(
                    {"type": "XSS", "endpoint": url, "vulnerabilities": xss_vulns}
                )
            if auth_vulns:
                self.results.append(
                    {
                        "type": "Broken Authentication",
                        "endpoint": url,
                        "vulnerabilities": auth_vulns,
                    }
                )
            if data_vulns:
                self.results.append(
                    {
                        "type": "Sensitive Data Exposure",
                        "endpoint": url,
                        "vulnerabilities": data_vulns,
                    }
                )
            if access_vulns:
                self.results.append(
                    {
                        "type": "Broken Access Control",
                        "endpoint": url,
                        "vulnerabilities": access_vulns,
                    }
                )
            if deserialization_vulns:
                self.results.append(
                    {
                        "type": "Insecure Deserialization",
                        "endpoint": url,
                        "vulnerabilities": deserialization_vulns,
                    }
                )
            if config_vulns:
                self.results.append(
                    {
                        "type": "Security Misconfiguration",
                        "endpoint": url,
                        "vulnerabilities": config_vulns,
                    }
                )

        # Run the open port scanner on the target IP
        open_ports = scan_open_ports(self.target_ip)
        if open_ports:
            self.results.append(
                {
                    "type": "Open Ports",
                    "target_ip": self.target_ip,
                    "vulnerabilities": open_ports,
                }
            )

    def generate_report(self):  # Move the method inside the class
        print("Scan Results:")
        for result in self.results:
            # Handle Open Ports separately
            if result["type"] == "Open Ports":
                print(f"Vulnerability: {result['type']} detected on {result['target_ip']}")
                for port in result["vulnerabilities"]:
                    print(f"  - Port: {port}")
            else:
                # Default handling for other vulnerabilities
                print(
                    f"Vulnerability: {result['type']} detected at {result.get('endpoint', 'Unknown endpoint')}"
                )
                for vuln in result["vulnerabilities"]:
                    if isinstance(vuln, tuple):
                        print(f"  - Parameter: {vuln[0]} | Payload: {vuln[1]}")
                    else:
                        print(f"  - Issue: {vuln}")
