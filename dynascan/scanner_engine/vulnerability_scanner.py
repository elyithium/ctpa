from urllib.parse import urljoin
from scanner import scan_broken_access_control
from scanner import scan_broken_authentication
from scanner import scan_insecure_deserialization
from scanner import scan_security_misconfigurations
from scanner import scan_sql_injection
from scanner import scan_xss
from scanner import scan_sql_injection
from scanner import scan_open_ports, common_tcp_ports
from scanner import scan_cryptographic_failures_endpoint, scan_cryptographic_failures_domain

from scanner_engine.pdf_report_generator import generate_reportlab_pdf

class VulnerabilityScanner:
    def __init__(self, base_url, endpoints):
        self.base_url = base_url
        self.endpoints = endpoints
        self.results = []

    def run_scans(self):
        # Perform domain-wide cryptographic checks
        print(f"Scanning domain-wide {self.base_url}...")
        self.collect_results(scan_cryptographic_failures_domain(self.base_url), "Cryptographic Failure")

        for endpoint, params in self.endpoints.items():
            url = urljoin(self.base_url, endpoint)
            print(f"Scanning {url}...")

            # Run each scanner and categorize the results
            self.collect_results(scan_sql_injection(url, params), "SQL Injection")
            self.collect_results(scan_xss(url, params), "XSS")
            self.collect_results(scan_broken_authentication(url, params), "Broken Authentication")
            self.collect_results(scan_broken_access_control(url, params), "Broken Access Control")
            self.collect_results(scan_insecure_deserialization(url, params), "Insecure Deserialization")
            self.collect_results(scan_security_misconfigurations(url), "Security Misconfigurations")
            self.collect_results(scan_cryptographic_failures_endpoint(url, params), "Cryptographic Failure")
            self.collect_results(scan_open_ports(self.base_url, common_tcp_ports), "Open Ports")
    def collect_results(self, vulnerabilities, category):
        if vulnerabilities:
            for vulnerability in vulnerabilities:
                vulnerability['category'] = category  # Add category to each result
            self.results.extend(vulnerabilities)

    def generate_report(self, output_format='console'):
        summary = self.summarize_alerts()
        category_summary = self.summarize_categories()

        if output_format == 'console':
            print("Scan Results:")
            for result in self.results:
                print(f"Vulnerability: {result['issue']} detected at {result['endpoint']}")
                print(f"  - Description: {result['description']}")
                print(f"  - Severity: {result['severity']}")
                print(f"  - Category: {result['category']}")
                print("\n")

            # Print the category summary
            print("Category Summary:")
            for category, count in category_summary.items():
                print(f"{category}: {count} instances")

        elif output_format == 'pdf':
            print("Generating PDF report...")

            # Create a valid filename for the site (sanitize the URL)
            site_filename = self.base_url
            generate_reportlab_pdf(site_filename, summary, self.results, category_summary)  # Pass category summary to PDF generator

            print(f"Finished generating PDF report: {site_filename}")

    def summarize_alerts(self):
        summary = {'High': 0, 'Medium': 0, 'Low': 0}
        for result in self.results:
            severity = result['severity']
            if severity in summary:
                summary[severity] += 1
        return summary

    def summarize_categories(self):
        category_summary = {}
        for result in self.results:
            category = result.get('category', 'Uncategorized')
            if category not in category_summary:
                category_summary[category] = 0
            category_summary[category] += 1
        return category_summary
