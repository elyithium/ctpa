from urllib.parse import urljoin
from scanner.sql_injection_scanner import scan_sql_injection
from scanner.xss_scanner import scan_xss
from scanner.broken_authentication_scanner import scan_broken_authentication
from scanner.broken_access_control_scanner import scan_broken_access_control
from scanner.insecure_deserialization_scanner import scan_insecure_deserialization
from scanner.security_misconfiguration_scanner import scan_security_misconfigurations
from scanner.cryptographic_scanner import scan_cryptographic_failures
from scanner_engine.pdf_report_generator import generate_reportlab_pdf

class VulnerabilityScanner:
    def __init__(self, base_url, endpoints):
        self.base_url = base_url
        self.endpoints = endpoints
        self.results = []

    def run_scans(self):
        for endpoint, params in self.endpoints.items():
            url = urljoin(self.base_url, endpoint)
            print(f"Scanning {url}...")

            # Run each scanner
            self.collect_results(scan_sql_injection(url, params))
            self.collect_results(scan_xss(url, params))
            self.collect_results(scan_broken_authentication(url, params))
            self.collect_results(scan_broken_access_control(url))
            self.collect_results(scan_insecure_deserialization(url, params))
            self.collect_results(scan_security_misconfigurations(url))
            self.collect_results(scan_cryptographic_failures(self.base_url))

    def collect_results(self, vulnerabilities):
        if vulnerabilities:
            self.results.extend(vulnerabilities)

    def generate_report(self, output_format='console'):
        summary = self.summarize_alerts()

        if output_format == 'console':
            print("Scan Results:")
            for result in self.results:
                print(f"Vulnerability: {result['issue']} detected at {result['endpoint']}")
                print(f"  - Description: {result['description']}")
                print(f"  - Severity: {result['severity']}")
        elif output_format == 'pdf':
            print("Generating PDF report...")
            site = self.base_url
            generate_reportlab_pdf(site, summary, self.results)
            print("Finished generating PDF report.")


    def summarize_alerts(self):
        summary = {'High': 0, 'Medium': 0, 'Low': 0}
        for result in self.results:
            severity = result['severity']
            if severity in summary:
                summary[severity] += 1
        return summary
